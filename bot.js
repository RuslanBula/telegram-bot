require('dotenv').config();
const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error('MongoDB connection error:', err));

// –ú–æ–¥–µ–ª—å –≤—ñ–¥–≥—É–∫—É
const reviewSchema = new mongoose.Schema({
    identifier: { type: String, required: true },
    review: { type: String, required: true },
    userId: { type: Number, required: true },
    timestamp: { type: Date, default: Date.now }
});
const Review = mongoose.model('Review', reviewSchema);

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏, —â–æ–± –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞–ª–æ—Å—è –º–µ–Ω—é –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É
bot.setMyCommands([]);
const userStates = new Map();

const LIMIT = 3;
const WAIT_TIME = 4 * 60 * 60 * 1000; // 4 –≥–æ–¥–∏–Ω–∏

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
function sendMainMenu(chatId) {
    userStates.delete(chatId);
    bot.sendMessage(chatId,
        '–ü—Ä–∏–≤—ñ—Ç! –†–∞–¥—ñ –±–∞—á–∏—Ç–∏ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ.\n–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?',
        {
            reply_markup: {
                keyboard: [
                    ['–ó–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—éüîé'],
                    ['–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫‚≠ê'],
                    ['–ü—ñ–¥—Ç—Ä–∏–º–∫–∞‚öô']
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        }
    );
}

// –°—Ç–∞—Ä—Ç
bot.onText(/\/start/, (msg) => {
    sendMainMenu(msg.chat.id);
});

// –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('confirm_review:')) {
        const key = data.split(':')[1];
        const state = userStates.get(key);

        if (!state) {
            return bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.');
        }

        const saved = await saveReview(state.identifier, state.review, state.userId);

        if (!saved) {
            return bot.sendMessage(chatId,
                '–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞/–∞–≤—Ç–æ –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 4 –≥–æ–¥–∏–Ω–∏.',
                { parse_mode: 'Markdown' }
            ).then(() => {
                setTimeout(() => {
                    sendMainMenu(chatId);
                }, 3000);
            });
        }

        userStates.delete(key);

        await bot.sendMessage(chatId, '‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ –≤–Ω–µ—Å–æ–∫.');

        setTimeout(() => {
            sendMainMenu(chatId);
        }, 3000);
    }

    if (data === 'cancel_review') {
        userStates.delete(chatId);
        return sendMainMenu(chatId);
    }
});
// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();
    if (!text || text.startsWith('/')) return;
    if (!userStates.has(chatId)) {
        if (text === '–ó–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—éüîé') {
            userStates.set(chatId, { step: 'awaiting_identifier_search' });
            return bot.sendMessage(chatId,
                '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, AB1234CD) –∞–±–æ @–Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫–∏.',
                { parse_mode: 'Markdown', reply_markup: { remove_keyboard: true } });
        }

        if (text === '–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫‚≠ê') {
            userStates.set(chatId, { step: 'awaiting_identifier_review' });
            return bot.sendMessage(chatId,
                '–©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–í–µ–ª–∏–∫–∏–º–∏, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ AB1234CD) –∞–±–æ @–Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.',
                { parse_mode: 'Markdown', reply_markup: { remove_keyboard: true } });
        }

        if (text === '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞‚öô') {
            return bot.sendMessage(chatId, '–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é: @aaghsnnn');
        }

        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ—á–æ–≥–æ –∑ –º–µ–Ω—é –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ —ñ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ ‚Äî –Ω–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ
        return;
    }
    const state = userStates.get(chatId);
    if (!state) return;

    if (state.step === 'awaiting_identifier_search') {
        return showReviews(chatId, text.toUpperCase());
    }

    if (state.step === 'awaiting_identifier_review') {
        const validPlate = /^[A-Z]{2}\d{4}[A-Z]{2}$/;
        const validNickname = /^@[\w\d_]{5,}$/;

        if (!validPlate.test(text) && !validNickname.test(text)) {
            return bot.sendMessage(chatId,
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, AB1234CD) –∞–±–æ @–Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.',
                { parse_mode: 'Markdown' });
        }

        userStates.set(chatId, {
            step: 'awaiting_review_text',
            identifier: text.toUpperCase(),
            userId: msg.from.id
        });
        return bot.sendMessage(chatId,
            '–î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫.\n–ü—Ä–∏–∫–ª–∞–¥: ¬´–õ–µ–≥–∫–æ–≤–µ –∞–≤—Ç–æ, –≤—Å–µ —á–∏—Å—Ç–æ —Ç–∞ —à–≤–∏–¥–∫–æ –¥–æ—ó—Ö–∞–≤¬ª',
            { reply_markup: { remove_keyboard: true } });
    }

    const confirmKey = `${chatId}_${Date.now()}`;
    userStates.set(confirmKey, {
        identifier: state.identifier,
        review: text,
        userId: state.userId
    });

    return bot.sendMessage(chatId,
        '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É?',
        {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏', callback_data: `confirm_review:${confirmKey}` },
                        { text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_review' }
                    ]
                ]
            }
        }
    );
}); // <-- –û—Å—å —Ü—è –∑–∞–∫—Ä–∏–≤–∞—é—á–∞ –¥—É–∂–∫–∞!

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
async function saveReview(identifier, reviewText, userId) {
    try {
        const lastReview = await Review.findOne({
            identifier,
            userId,
            timestamp: { $gte: new Date(Date.now() - WAIT_TIME) }
        }).sort({ timestamp: -1 });

        if (lastReview) return false;

        await Review.create({
            identifier,
            review: reviewText,
            userId,
            timestamp: new Date()
        });

        return true;
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:', err);
        return false;
    }
}

// –ü–æ–∫–∞–∑ –≤—ñ–¥–≥—É–∫—ñ–≤
async function showReviews(chatId, identifier) {
    try {
        const reviews = await Review.find({ identifier })
            .sort({ timestamp: -1 })
            .limit(LIMIT);

        if (reviews.length === 0) {
            await bot.sendMessage(chatId, '–í—ñ–¥–≥—É–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üôÖ‚Äç‚ôÇÔ∏è');
        } else {
            let message = `–û—Å—å, —è–∫—ñ –≤—ñ–¥–≥—É–∫–∏ –º–∏ –∑–Ω–∞–π—à–ª–∏..\n`;
            reviews.forEach((review) => {
                message += `üìç¬´${review.review}¬ª\n`;
            });
            await bot.sendMessage(chatId, message);
        }
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–µ–Ω—é
        setTimeout(() => {
            sendMainMenu(chatId);
        }, 3000);

    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤:', err);
        await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
}
