require('dotenv').config();
const mongoose = require('mongoose');
const TelegramBot = require('node-telegram-bot-api');

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(process.env.MONGO_URI)
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error('MongoDB connection error:', err));

// –ú–æ–¥–µ–ª—å –≤—ñ–¥–≥—É–∫—É
const reviewSchema = new mongoose.Schema({
    identifier: { type: String, required: true },
    rating: { type: Number, required: true }, // –∑—ñ—Ä–∫–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞
    review: { type: String }, // –≤—ñ–¥–≥—É–∫ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º
    userId: { type: Number, required: true },
    timestamp: { type: Date, default: Date.now }
});
const Review = mongoose.model('Review', reviewSchema);

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
const LIMIT = 3;
const WAIT_TIME = 4 * 60 * 60 * 1000; // 4 –≥–æ–¥–∏–Ω–∏

// –ö–µ—à —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function normalizeIdentifier(input) {
    const text = input.toString().trim();
    if (/^\d{4}$/.test(text)) {
        return text;
    }
    return text.toUpperCase().replace(/^@/, '');
}
const userStates = new Map();

// –§—É–Ω–∫—Ü—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
function sendMainMenu(chatId) {
    userStates.delete(chatId);
    bot.sendMessage(chatId,
        '–ü—Ä–∏–≤—ñ—Ç! –†–∞–¥—ñ –±–∞—á–∏—Ç–∏ –≤–∞—Å –≤ –Ω–∞—à–æ–º—É –±–æ—Ç—ñ.\n–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?',
        {
            reply_markup: {
                keyboard: [
                    ['–ó–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—éüîé'],
                    ['–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫‚≠ê'],
                    ['–ü—ñ–¥—Ç—Ä–∏–º–∫–∞‚öô']
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        }
    );
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É (–ø–æ–∑–±–∞–≤–ª–µ–Ω–µ –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω—å –∑–∞ 4 –≥–æ–¥–∏–Ω–∏)
async function saveReview(identifier, reviewText, userId, rating) {
    try {
        const lastReview = await Review.findOne({
            userId,
            timestamp: { $gte: new Date(Date.now() - WAIT_TIME) }
        }).sort({ timestamp: -1 });

        if (lastReview) return false;

        await Review.create({
            identifier: normalizeIdentifier(identifier),
            review: reviewText,
            userId,
            rating,
            timestamp: new Date()
        });
        return true;
    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:', err);
        return false;
    }
}

// –ü–æ–∫–∞–∑ –≤—ñ–¥–≥—É–∫—ñ–≤ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showReviews(chatId, identifier) {
    try {
        const allReviews = await Review.find({ identifier: normalizeIdentifier(identifier) }).sort({ timestamp: -1 });
        const total = allReviews.length;

        if (total === 0) {
            await bot.sendMessage(chatId, '–í—ñ–¥–≥—É–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üôÖ‚Äç‚ôÇÔ∏è');
        } else {
            let message = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üí°\n‚Ä¢ –í—Å—å–æ–≥–æ –≤—ñ–¥–≥—É–∫—ñ–≤: ${total} üìç\n\n–û—Å—å, —è–∫—ñ –≤—ñ–¥–≥—É–∫–∏ –º–∏ –∑–Ω–∞–π—à–ª–∏:\n`;

            const latestReviews = allReviews.slice(0, LIMIT);
            latestReviews.forEach((review) => {
                if (review.review && review.review.trim()) {
                    message += `üìç ¬´${review.review.trim()}¬ª\n`;
                }
            });

            await bot.sendMessage(chatId, message);
        }

        // –ß–µ–∫–∞—î–º–æ 3 —Å–µ–∫—É–Ω–¥–∏, –ø–æ—Ç—ñ–º –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é
        await new Promise(resolve => setTimeout(resolve, 3000));
        await sendMainMenu(chatId);

    } catch (err) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤:', err);
        await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
}

// –û–±—Ä–æ–±–∫–∞ /start
bot.onText(/\/start/, (msg) => {
    sendMainMenu(msg.chat.id);
});

// –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data.startsWith('confirm_review:')) {
        const key = Number(data.split(':')[1]); // —â–æ–± —Ç–æ—á–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ chatId —è–∫ —á–∏—Å–ª–æ
        const state = userStates.get(key);

        if (!state) {
            return bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.');
        }

        const saved = await saveReview(state.identifier, state.review, state.userId, state.rating);

        if (!saved) {
            return bot.sendMessage(chatId,
                '–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞/–∞–≤—Ç–æ –Ω–µ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ 4 –≥–æ–¥–∏–Ω–∏.',
                { parse_mode: 'Markdown' }
            ).then(() => {
                setTimeout(() => {
                    sendMainMenu(chatId);
                }, 3000);
            });
        }

        userStates.delete(key);

        await bot.sendMessage(chatId, '‚úÖ –í–∞—à –≤—ñ–¥–≥—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –î—è–∫—É—î–º–æ –∑–∞ –≤–Ω–µ—Å–æ–∫.');

        setTimeout(() => {
            sendMainMenu(chatId);
        }, 3000);
    }

    if (data === 'cancel_review') {
        userStates.delete(chatId);
        return sendMainMenu(chatId);
    }

    if (data.startsWith('rating_')) {
        const rating = Number(data.split('_')[1]);
        const state = userStates.get(chatId);

        if (!state || !state.identifier) {
            return bot.sendMessage(chatId, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É.');
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ü—ñ–Ω–∫—É —ñ —á–µ–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ñ–¥–≥—É–∫—É –∞–±–æ –ø—Ä–æ–ø—É—Å–∫—É
        state.rating = rating;
        state.step = 'awaiting_optional_review';
        userStates.set(chatId, state);

        return bot.sendMessage(chatId,
            `–í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ${rating}‚≠êÔ∏è\n\n–•–æ—á–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä? –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ‚Äú–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏‚Äù.`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: 'skip_review' }]
                    ]
                }
            }
        );
    }

    if (data === 'skip_review') {
        const state = userStates.get(chatId);
        if (!state || !state.identifier || !state.rating) {
            return bot.sendMessage(chatId, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É.');
        }

        userStates.set(chatId, {
            ...state,
            step: 'awaiting_confirmation',
            review: ''
        });

        return bot.sendMessage(chatId,
            `–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ${state.rating}‚≠êÔ∏è –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—è?`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: ' –¢–∞–∫, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é', callback_data: `confirm_review:${chatId}` }],
                        [{ text: ' –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_review' }]
                    ]
                }
            }
        );
    }
});

// –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();
    if (!text || text.startsWith('/')) return;

    if (!userStates.has(chatId)) {
        if (text === '–ó–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—éüîé') {
            userStates.set(chatId, { step: 'awaiting_identifier_search' });
            return bot.sendMessage(chatId,
                '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–í–µ–ª–∏–∫–∏–º–∏, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, AB1234CD) –∞–±–æ @–Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏ 4 —Ü–∏—Ñ—Ä–∏, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫–∏.',
                { parse_mode: 'Markdown', reply_markup: { remove_keyboard: true } });
        }

        if (text === '–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫‚≠ê') {
            userStates.set(chatId, { step: 'awaiting_identifier_review' });
            return bot.sendMessage(chatId,
                '–©–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–í–µ–ª–∏–∫–∏–º–∏, –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ AB1234CD) –∞–±–æ @–Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏ 4 —Ü–∏—Ñ—Ä–∏.',
                { parse_mode: 'Markdown', reply_markup: { remove_keyboard: true } });
        } 

        if (text === '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞‚öô') {
            return bot.sendMessage(chatId, '–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é: @aaghsnnn');
        }

        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ—á–æ–≥–æ –∑ –º–µ–Ω—é –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–≤ —ñ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        return;
    }

    const state = userStates.get(chatId);
    if (!state) return;

    const validPlate = /^[A-Z]{2}\d{4}[A-Z]{2}$/;
    const validNickname = /^@[\w\d_]{5,}$/;
    const validFourDigits = /^\d{4}$/;

    function isValidIdentifier(text) {
        return validPlate.test(text.toUpperCase())
            || validNickname.test(text)
            || validFourDigits.test(text);
    }

    if (state.step === 'awaiting_identifier_search') {
        if (!isValidIdentifier(text)) {
            return bot.sendMessage(chatId,
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, AB1234CD) –∞–±–æ @–Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏ 4 —Ü–∏—Ñ—Ä–∏.',
                { parse_mode: 'Markdown' });
        }
        return showReviews(chatId, normalizeIdentifier(text));    }

    if (state.step === 'awaiting_identifier_review') {
        if (!isValidIdentifier(text)) {
            return bot.sendMessage(chatId,
                '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, AB1234CD) –∞–±–æ @–Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–∏ 4 —Ü–∏—Ñ—Ä–∏.',
                { parse_mode: 'Markdown' });
        }

        userStates.set(chatId, {
            step: 'awaiting_rating',
            identifier: text.toUpperCase(),
            userId: msg.from.id
        });

        return bot.sendMessage(chatId,
            '–û—Ü—ñ–Ω—ñ—Ç—å –ø—ñ–¥—Å–∞–¥–∫—É –≤—ñ–¥ 1 –¥–æ 5‚≠êÔ∏è\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –æ–¥–Ω—É —ñ–∑ –∑—ñ—Ä–æ—á–æ–∫ –Ω–∏–∂—á–µ‚ú®',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '1‚≠êÔ∏è', callback_data: 'rating_1' },
                            { text: '2‚≠êÔ∏è', callback_data: 'rating_2' }],
                        [{ text: '3‚≠êÔ∏è', callback_data: 'rating_3' },
                            { text: '4‚≠êÔ∏è', callback_data: 'rating_4' }],
                        [{ text: '5‚≠êÔ∏è', callback_data: 'rating_5' }]
                    ]
                }
            }
        );
    }
    else if (state.step === 'awaiting_optional_review') {
        const key = chatId;

        userStates.set(key, {
            ...state,
            review: text,
            step: 'awaiting_confirmation'
        });

        return bot.sendMessage(chatId,
            `–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ${state.rating}‚≠êÔ∏è –∑ —Ç–∞–∫–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º?\n\n¬´${text}¬ª`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–¢–∞–∫, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é', callback_data: `confirm_review:${key}` }],
                        [{ text: '–°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_review' }]
                    ]
                }
            }
        );
    }

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
    async function saveReview(identifier, reviewText, userId, rating) {
        try {
            const lastReview = await Review.findOne({
                userId,
                timestamp: { $gte: new Date(Date.now() - WAIT_TIME) }
            }).sort({ timestamp: -1 });

            if (lastReview) return false;

            await Review.create({
                identifier,
                review: reviewText,
                userId,
                rating,
                timestamp: new Date()
            });

            return true;
        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:', err);
            return false;
        }
    }


// –ü–æ–∫–∞–∑ –≤—ñ–¥–≥—É–∫—ñ–≤
// –ü–æ–∫–∞–∑ –≤—ñ–¥–≥—É–∫—ñ–≤ + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å)
    const averageRating = allReviews.reduce((acc, r) => acc + r.rating, 0) / total;
    message = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üí°\n‚Ä¢ –í—Å—å–æ–≥–æ –≤—ñ–¥–≥—É–∫—ñ–≤: ${total} üìç\n‚Ä¢ –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞: ${averageRating.toFixed(1)}‚≠êÔ∏è\n\n–û—Å—å, —è–∫—ñ –≤—ñ–¥–≥—É–∫–∏ –º–∏ –∑–Ω–∞–π—à–ª–∏:\n`;
    async function showReviews(chatId, identifier) {
        try {
            const allReviews = await Review.find({ identifier }).sort({ timestamp: -1 });
            const total = allReviews.length;

            if (total === 0) {
                await bot.sendMessage(chatId, '–í—ñ–¥–≥—É–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üôÖ‚Äç‚ôÇÔ∏è');
            } else {
                const ratings = allReviews
                    .map(r => parseFloat(r.rating))
                    .filter(r => !isNaN(r));

                const totalRatings = ratings.length;
                const averageRating = totalRatings > 0
                    ? ratings.reduce((sum, r) => sum + r, 0) / totalRatings
                    : 0;

                let message = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üí°\n\n‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: ${averageRating.toFixed(1)}‚≠êÔ∏è\n‚Ä¢ –í—Å—å–æ–≥–æ –≤—ñ–¥–≥—É–∫—ñ–≤: ${total} üìç\n\n`;
                message += '–û—Å—å, —è–∫—ñ –≤—ñ–¥–≥—É–∫–∏ –º–∏ –∑–Ω–∞–π—à–ª–∏:\n\n';

                const latestReviews = allReviews.filter(r => r.review && r.review.trim());                latestReviews.forEach((review) => {
                    if (review.review && review.review.trim()) {
                        message += `üìç ¬´${review.review.trim()}¬ª\n`;
                    }
                });

                await bot.sendMessage(chatId, message);
            }

            // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await new Promise(resolve => setTimeout(resolve, 2000));
            return sendMainMenu(chatId);

        } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤:', err);
            await bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–≥—É–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
            return sendMainMenu(chatId);
        }
    }
});